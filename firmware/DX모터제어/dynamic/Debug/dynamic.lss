
dynamic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000004f2  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000122  00800100  00800100  00000586  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000588  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ceb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000100  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000d1e  00000000  00000000  00000e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000433  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000008f6  00000000  00000000  00001f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002b8  00000000  00000000  00002864  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003c7  00000000  00000000  00002b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c1f  00000000  00000000  00002ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d0  00000000  00000000  00003b02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c1       	rjmp	.+636    	; 0x2c6 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	ce c0       	rjmp	.+412    	; 0x216 <__vector_30>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 32       	cpi	r26, 0x22	; 34
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	87 d1       	rcall	.+782    	; 0x3b8 <main>
  aa:	21 c2       	rjmp	.+1090   	; 0x4ee <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <TxPacket>:

void RxPacket(U08 ID,U08 Data_Addr){
	U08 ParameterLength=2;
	Parameter[0] = Data_Addr;
	Parameter[1] = 1;
	TxPacket(ID, READ_DATA_INS,ParameterLength);
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	9f ef       	ldi	r25, 0xFF	; 255
  ba:	90 93 00 01 	sts	0x0100, r25
  be:	90 93 01 01 	sts	0x0101, r25
  c2:	80 93 02 01 	sts	0x0102, r24
  c6:	84 2f       	mov	r24, r20
  c8:	8e 5f       	subi	r24, 0xFE	; 254
  ca:	80 93 03 01 	sts	0x0103, r24
  ce:	60 93 04 01 	sts	0x0104, r22
  d2:	44 23       	and	r20, r20
  d4:	09 f4       	brne	.+2      	; 0xd8 <TxPacket+0x2a>
  d6:	42 c0       	rjmp	.+132    	; 0x15c <TxPacket+0xae>
  d8:	e0 e8       	ldi	r30, 0x80	; 128
  da:	f1 e0       	ldi	r31, 0x01	; 1
  dc:	a5 e0       	ldi	r26, 0x05	; 5
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	24 2f       	mov	r18, r20
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	2f 57       	subi	r18, 0x7F	; 127
  e8:	3e 4f       	sbci	r19, 0xFE	; 254
  ea:	91 91       	ld	r25, Z+
  ec:	9d 93       	st	X+, r25
  ee:	e2 17       	cp	r30, r18
  f0:	f3 07       	cpc	r31, r19
  f2:	d9 f7       	brne	.-10     	; 0xea <TxPacket+0x3c>
  f4:	0f 2e       	mov	r0, r31
  f6:	f6 e0       	ldi	r31, 0x06	; 6
  f8:	ff 2e       	mov	r15, r31
  fa:	f0 2d       	mov	r31, r0
  fc:	f4 0e       	add	r15, r20
  fe:	6f 2d       	mov	r22, r15
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	61 50       	subi	r22, 0x01	; 1
 104:	71 09       	sbc	r23, r1
 106:	63 30       	cpi	r22, 0x03	; 3
 108:	71 05       	cpc	r23, r1
 10a:	74 f5       	brge	.+92     	; 0x168 <TxPacket+0xba>
 10c:	22 e0       	ldi	r18, 0x02	; 2
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0b c0       	rjmp	.+22     	; 0x12a <TxPacket+0x7c>
 114:	f9 01       	movw	r30, r18
 116:	e0 50       	subi	r30, 0x00	; 0
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	20 81       	ld	r18, Z
 11c:	92 0f       	add	r25, r18
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	26 17       	cp	r18, r22
 126:	37 07       	cpc	r19, r23
 128:	ac f3       	brlt	.-22     	; 0x114 <TxPacket+0x66>
 12a:	f9 01       	movw	r30, r18
 12c:	e0 50       	subi	r30, 0x00	; 0
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	90 95       	com	r25
 132:	90 83       	st	Z, r25
 134:	1a 9a       	sbi	0x03, 2	; 3
 136:	ff 20       	and	r15, r15
 138:	71 f0       	breq	.+28     	; 0x156 <TxPacket+0xa8>
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	d1 e0       	ldi	r29, 0x01	; 1
 13e:	0f 2d       	mov	r16, r15
 140:	01 50       	subi	r16, 0x01	; 1
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	0f 5f       	subi	r16, 0xFF	; 255
 146:	1e 4f       	sbci	r17, 0xFE	; 254
 148:	5e 9a       	sbi	0x0b, 6	; 11
 14a:	69 91       	ld	r22, Y+
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	9c d1       	rcall	.+824    	; 0x488 <Uart_Putch>
 150:	c0 17       	cp	r28, r16
 152:	d1 07       	cpc	r29, r17
 154:	c9 f7       	brne	.-14     	; 0x148 <TxPacket+0x9a>
 156:	5e 9b       	sbis	0x0b, 6	; 11
 158:	fe cf       	rjmp	.-4      	; 0x156 <TxPacket+0xa8>
 15a:	0b c0       	rjmp	.+22     	; 0x172 <TxPacket+0xc4>
 15c:	65 e0       	ldi	r22, 0x05	; 5
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	0f 2e       	mov	r0, r31
 162:	f6 e0       	ldi	r31, 0x06	; 6
 164:	ff 2e       	mov	r15, r31
 166:	f0 2d       	mov	r31, r0
 168:	22 e0       	ldi	r18, 0x02	; 2
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	d1 cf       	rjmp	.-94     	; 0x114 <TxPacket+0x66>
 172:	1a 98       	cbi	0x03, 2	; 3
 174:	8f 2d       	mov	r24, r15
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	ff 90       	pop	r15
 180:	08 95       	ret

00000182 <Set_Id>:
 182:	93 e0       	ldi	r25, 0x03	; 3
 184:	90 93 80 01 	sts	0x0180, r25
 188:	80 93 81 01 	sts	0x0181, r24
 18c:	42 e0       	ldi	r20, 0x02	; 2
 18e:	63 e0       	ldi	r22, 0x03	; 3
 190:	8e ef       	ldi	r24, 0xFE	; 254
 192:	8d df       	rcall	.-230    	; 0xae <TxPacket>
 194:	80 93 00 02 	sts	0x0200, r24
 198:	08 95       	ret

0000019a <Set_Return_Delay>:
 19a:	95 e0       	ldi	r25, 0x05	; 5
 19c:	90 93 80 01 	sts	0x0180, r25
 1a0:	80 93 82 01 	sts	0x0182, r24
 1a4:	42 e0       	ldi	r20, 0x02	; 2
 1a6:	63 e0       	ldi	r22, 0x03	; 3
 1a8:	8e ef       	ldi	r24, 0xFE	; 254
 1aa:	81 df       	rcall	.-254    	; 0xae <TxPacket>
 1ac:	80 93 00 02 	sts	0x0200, r24
 1b0:	08 95       	ret

000001b2 <Action_Postion_Speed>:
 1b2:	0f 93       	push	r16
 1b4:	9e e1       	ldi	r25, 0x1E	; 30
 1b6:	90 93 80 01 	sts	0x0180, r25
 1ba:	40 93 81 01 	sts	0x0181, r20
 1be:	60 93 82 01 	sts	0x0182, r22
 1c2:	00 93 83 01 	sts	0x0183, r16
 1c6:	20 93 84 01 	sts	0x0184, r18
 1ca:	45 e0       	ldi	r20, 0x05	; 5
 1cc:	63 e0       	ldi	r22, 0x03	; 3
 1ce:	6f df       	rcall	.-290    	; 0xae <TxPacket>
 1d0:	80 93 00 02 	sts	0x0200, r24
 1d4:	0f 91       	pop	r16
 1d6:	08 95       	ret

000001d8 <ON_OFF_Torque>:
 1d8:	98 e1       	ldi	r25, 0x18	; 24
 1da:	90 93 80 01 	sts	0x0180, r25
 1de:	60 93 81 01 	sts	0x0181, r22
 1e2:	42 e0       	ldi	r20, 0x02	; 2
 1e4:	63 e0       	ldi	r22, 0x03	; 3
 1e6:	63 df       	rcall	.-314    	; 0xae <TxPacket>
 1e8:	80 93 00 02 	sts	0x0200, r24
 1ec:	08 95       	ret

000001ee <RxPosition>:
}

void RxPosition(U08 ID){
	U08 ParameterLength=2;
	Parameter[0] = PRESENT_POSTION_L_ADDR;
 1ee:	94 e2       	ldi	r25, 0x24	; 36
 1f0:	90 93 80 01 	sts	0x0180, r25
	Parameter[1] = 2;
 1f4:	92 e0       	ldi	r25, 0x02	; 2
 1f6:	90 93 81 01 	sts	0x0181, r25
	TxPacket(ID, READ_DATA_INS,ParameterLength);
 1fa:	42 e0       	ldi	r20, 0x02	; 2
 1fc:	62 e0       	ldi	r22, 0x02	; 2
 1fe:	57 cf       	rjmp	.-338    	; 0xae <TxPacket>

00000200 <array_clear>:
#include "uart.h"
#include "dynamic.h"

void array_clear(unsigned char* array, unsigned char size){
	unsigned char i;
	for(i=0;i<size;i++){
 200:	66 23       	and	r22, r22
 202:	41 f0       	breq	.+16     	; 0x214 <array_clear+0x14>
 204:	28 2f       	mov	r18, r24
 206:	e8 2f       	mov	r30, r24
 208:	f9 2f       	mov	r31, r25
		array[i]=0;
 20a:	11 92       	st	Z+, r1
#include "uart.h"
#include "dynamic.h"

void array_clear(unsigned char* array, unsigned char size){
	unsigned char i;
	for(i=0;i<size;i++){
 20c:	8e 2f       	mov	r24, r30
 20e:	82 1b       	sub	r24, r18
 210:	86 17       	cp	r24, r22
 212:	d8 f3       	brcs	.-10     	; 0x20a <array_clear+0xa>
 214:	08 95       	ret

00000216 <__vector_30>:
Mortor_State mortor_list[8];
U08 rx_buffer[8];
volatile U08 flag=0; 


ISR(USART1_RX_vect){
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	0b b6       	in	r0, 0x3b	; 59
 222:	0f 92       	push	r0
 224:	0f 93       	push	r16
 226:	2f 93       	push	r18
 228:	3f 93       	push	r19
 22a:	4f 93       	push	r20
 22c:	5f 93       	push	r21
 22e:	6f 93       	push	r22
 230:	7f 93       	push	r23
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	af 93       	push	r26
 238:	bf 93       	push	r27
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
	U08 buffer;
	Disable_ISR();
 23e:	8f b7       	in	r24, 0x3f	; 63
 240:	8f 77       	andi	r24, 0x7F	; 127
 242:	8f bf       	out	0x3f, r24	; 63
	
	buffer=UDR1;
 244:	80 91 9c 00 	lds	r24, 0x009C
	switch(buffer){
 248:	83 36       	cpi	r24, 0x63	; 99
 24a:	b1 f0       	breq	.+44     	; 0x278 <__vector_30+0x62>
 24c:	28 f4       	brcc	.+10     	; 0x258 <__vector_30+0x42>
 24e:	81 36       	cpi	r24, 0x61	; 97
 250:	49 f0       	breq	.+18     	; 0x264 <__vector_30+0x4e>
 252:	82 36       	cpi	r24, 0x62	; 98
 254:	09 f5       	brne	.+66     	; 0x298 <__vector_30+0x82>
 256:	09 c0       	rjmp	.+18     	; 0x26a <__vector_30+0x54>
 258:	85 36       	cpi	r24, 0x65	; 101
 25a:	c9 f0       	breq	.+50     	; 0x28e <__vector_30+0x78>
 25c:	a0 f0       	brcs	.+40     	; 0x286 <__vector_30+0x70>
 25e:	87 36       	cpi	r24, 0x67	; 103
 260:	d9 f4       	brne	.+54     	; 0x298 <__vector_30+0x82>
 262:	18 c0       	rjmp	.+48     	; 0x294 <__vector_30+0x7e>
		case 'a':
		Set_Id(1);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	8d df       	rcall	.-230    	; 0x182 <Set_Id>
		break;
 268:	17 c0       	rjmp	.+46     	; 0x298 <__vector_30+0x82>
		case 'b':
		Action_Postion_Speed(0xfe,1,255,3,0xff);	
 26a:	0f ef       	ldi	r16, 0xFF	; 255
 26c:	23 e0       	ldi	r18, 0x03	; 3
 26e:	4f ef       	ldi	r20, 0xFF	; 255
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	8e ef       	ldi	r24, 0xFE	; 254
 274:	9e df       	rcall	.-196    	; 0x1b2 <Action_Postion_Speed>
		break;
 276:	10 c0       	rjmp	.+32     	; 0x298 <__vector_30+0x82>
		case 'c':
		Action_Postion_Speed(0xfe,0,0,3,0xff);
 278:	0f ef       	ldi	r16, 0xFF	; 255
 27a:	23 e0       	ldi	r18, 0x03	; 3
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	8e ef       	ldi	r24, 0xFE	; 254
 282:	97 df       	rcall	.-210    	; 0x1b2 <Action_Postion_Speed>
		break;
 284:	09 c0       	rjmp	.+18     	; 0x298 <__vector_30+0x82>
		case 'd':
		ON_OFF_Torque(0xfe,0);
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	8e ef       	ldi	r24, 0xFE	; 254
 28a:	a6 df       	rcall	.-180    	; 0x1d8 <ON_OFF_Torque>
		break;
 28c:	05 c0       	rjmp	.+10     	; 0x298 <__vector_30+0x82>
		case 'e':
		RxPosition(1);
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	ae df       	rcall	.-164    	; 0x1ee <RxPosition>
		break;
 292:	02 c0       	rjmp	.+4      	; 0x298 <__vector_30+0x82>
		case 'f':
	
		break;
		case 'g':
		Set_Return_Delay(250);
 294:	8a ef       	ldi	r24, 0xFA	; 250
 296:	81 df       	rcall	.-254    	; 0x19a <Set_Return_Delay>
		break;
	}
	
	Enable_ISR();
 298:	8f b7       	in	r24, 0x3f	; 63
 29a:	80 68       	ori	r24, 0x80	; 128
 29c:	8f bf       	out	0x3f, r24	; 63
}
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	bf 91       	pop	r27
 2a4:	af 91       	pop	r26
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	7f 91       	pop	r23
 2ac:	6f 91       	pop	r22
 2ae:	5f 91       	pop	r21
 2b0:	4f 91       	pop	r20
 2b2:	3f 91       	pop	r19
 2b4:	2f 91       	pop	r18
 2b6:	0f 91       	pop	r16
 2b8:	0f 90       	pop	r0
 2ba:	0b be       	out	0x3b, r0	; 59
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__vector_18>:

ISR(USART0_RX_vect){
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	0b b6       	in	r0, 0x3b	; 59
 2d2:	0f 92       	push	r0
 2d4:	2f 93       	push	r18
 2d6:	3f 93       	push	r19
 2d8:	4f 93       	push	r20
 2da:	5f 93       	push	r21
 2dc:	6f 93       	push	r22
 2de:	7f 93       	push	r23
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	af 93       	push	r26
 2e6:	bf 93       	push	r27
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31
	U08 buffer;
	Disable_ISR();
 2ec:	8f b7       	in	r24, 0x3f	; 63
 2ee:	8f 77       	andi	r24, 0x7F	; 127
 2f0:	8f bf       	out	0x3f, r24	; 63
	buffer=UDR0;
 2f2:	8c b1       	in	r24, 0x0c	; 12
	rx_buffer[flag]=buffer;
 2f4:	e0 91 01 02 	lds	r30, 0x0201
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	e6 5e       	subi	r30, 0xE6	; 230
 2fc:	fd 4f       	sbci	r31, 0xFD	; 253
 2fe:	80 83       	st	Z, r24
	
	flag++;
 300:	80 91 01 02 	lds	r24, 0x0201
 304:	8f 5f       	subi	r24, 0xFF	; 255
 306:	80 93 01 02 	sts	0x0201, r24
	if(flag == 8){
 30a:	80 91 01 02 	lds	r24, 0x0201
 30e:	88 30       	cpi	r24, 0x08	; 8
 310:	c9 f4       	brne	.+50     	; 0x344 <__vector_18+0x7e>
		//Uart_Putch(1,rx_buffer[2]);
		//Uart_Putch(1,param);
		//array_clear(rx_buffer,sizeof(rx_buffer));
		//flag=0;
		Mortor_State mo;
		mo.id=rx_buffer[2];
 312:	20 91 1c 02 	lds	r18, 0x021C
		mo.position_l=rx_buffer[5];
 316:	40 91 1f 02 	lds	r20, 0x021F
		mo.position_h=rx_buffer[6];
 31a:	30 91 20 02 	lds	r19, 0x0220
		
		mortor_list[mo.id-1]=mo;
 31e:	e2 2f       	mov	r30, r18
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	cf 01       	movw	r24, r30
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	e8 0f       	add	r30, r24
 32c:	f9 1f       	adc	r31, r25
 32e:	ee 5f       	subi	r30, 0xFE	; 254
 330:	fd 4f       	sbci	r31, 0xFD	; 253
 332:	20 83       	st	Z, r18
 334:	41 83       	std	Z+1, r20	; 0x01
 336:	32 83       	std	Z+2, r19	; 0x02
		//Uart_Putch(1,mo.id);
		//Uart_Putch(1,mo.position_l);
		//Uart_Putch(1,mo.position_h);
		array_clear(rx_buffer,sizeof(rx_buffer));
 338:	68 e0       	ldi	r22, 0x08	; 8
 33a:	8a e1       	ldi	r24, 0x1A	; 26
 33c:	92 e0       	ldi	r25, 0x02	; 2
 33e:	60 df       	rcall	.-320    	; 0x200 <array_clear>
		flag=0;
 340:	10 92 01 02 	sts	0x0201, r1
	}
	Enable_ISR();
 344:	8f b7       	in	r24, 0x3f	; 63
 346:	80 68       	ori	r24, 0x80	; 128
 348:	8f bf       	out	0x3f, r24	; 63
}
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0b be       	out	0x3b, r0	; 59
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <init_main>:
void init_main(){
	Disable_ISR();
 370:	8f b7       	in	r24, 0x3f	; 63
 372:	8f 77       	andi	r24, 0x7F	; 127
 374:	8f bf       	out	0x3f, r24	; 63
	sbi(DDRE,2);
 376:	12 9a       	sbi	0x02, 2	; 2
	PORTE=0x00;
 378:	13 b8       	out	0x03, r1	; 3
	Init_Uart(0, 1000000);
 37a:	40 e4       	ldi	r20, 0x40	; 64
 37c:	52 e4       	ldi	r21, 0x42	; 66
 37e:	6f e0       	ldi	r22, 0x0F	; 15
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	42 d0       	rcall	.+132    	; 0x40a <Init_Uart>
	Init_Uart(1, 57600);
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	51 ee       	ldi	r21, 0xE1	; 225
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	3c d0       	rcall	.+120    	; 0x40a <Init_Uart>
	Enable_ISR();
 392:	8f b7       	in	r24, 0x3f	; 63
 394:	80 68       	ori	r24, 0x80	; 128
 396:	8f bf       	out	0x3f, r24	; 63
 398:	08 95       	ret

0000039a <transmit_paket>:
}
void transmit_paket(Mortor_State mo){
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	d7 2f       	mov	r29, r23
 3a0:	c8 2f       	mov	r28, r24
	//U08 check = mo.id+11+WRITE_DATA_INS+CW_COM_MARGIN_ADDR+255+255+254+254+mo.position_l+mo.position_h;
	//check = ~check;
	
	//Uart_Putch(1,0xff);
	//Uart_Putch(1,0xff);
	Uart_Putch(1,mo.id);
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	71 d0       	rcall	.+226    	; 0x488 <Uart_Putch>
	//Uart_Putch(1,CW_COM_MARGIN_ADDR);
	//Uart_Putch(1,255);
	//Uart_Putch(1,255);
	//Uart_Putch(1,254);
	//Uart_Putch(1,254);
	Uart_Putch(1,mo.position_l);
 3a6:	6d 2f       	mov	r22, r29
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	6e d0       	rcall	.+220    	; 0x488 <Uart_Putch>
	Uart_Putch(1,mo.position_h);
 3ac:	6c 2f       	mov	r22, r28
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	6b d0       	rcall	.+214    	; 0x488 <Uart_Putch>
	//Uart_Putch(1,0);
	//Uart_Putch(1,0);
	//Uart_Putch(1,check);
			
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <main>:
int main(void)
{
	int i,k=0;
	int mortor_size=8;
	init_main();
 3b8:	db df       	rcall	.-74     	; 0x370 <init_main>
	
    while(1)
    {
		Uart_Putch(0,'a');
		Uart_Putch(1,'a');
		for(i=1;i<=mortor_size;i++){
 3ba:	00 e0       	ldi	r16, 0x00	; 0
 3bc:	10 e0       	ldi	r17, 0x00	; 0
	int mortor_size=8;
	init_main();
	
    while(1)
    {
		Uart_Putch(0,'a');
 3be:	61 e6       	ldi	r22, 0x61	; 97
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	62 d0       	rcall	.+196    	; 0x488 <Uart_Putch>
		Uart_Putch(1,'a');
 3c4:	61 e6       	ldi	r22, 0x61	; 97
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	5f d0       	rcall	.+190    	; 0x488 <Uart_Putch>
 3ca:	c1 e0       	ldi	r28, 0x01	; 1
		for(i=1;i<=mortor_size;i++){
			RxPosition(i);
 3cc:	8c 2f       	mov	r24, r28
 3ce:	0f df       	rcall	.-482    	; 0x1ee <RxPosition>
 3d0:	cf 5f       	subi	r28, 0xFF	; 255
	
    while(1)
    {
		Uart_Putch(0,'a');
		Uart_Putch(1,'a');
		for(i=1;i<=mortor_size;i++){
 3d2:	c9 30       	cpi	r28, 0x09	; 9
 3d4:	d9 f7       	brne	.-10     	; 0x3cc <main+0x14>
 3d6:	e8 01       	movw	r28, r16
			RxPosition(i);
		}
		for(k=0;k<mortor_size;k++){
			transmit_paket(mortor_list[k]);
 3d8:	fe 01       	movw	r30, r28
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	ec 0f       	add	r30, r28
 3e0:	fd 1f       	adc	r31, r29
 3e2:	ee 5f       	subi	r30, 0xFE	; 254
 3e4:	fd 4f       	sbci	r31, 0xFD	; 253
 3e6:	60 81       	ld	r22, Z
 3e8:	71 81       	ldd	r23, Z+1	; 0x01
 3ea:	82 81       	ldd	r24, Z+2	; 0x02
 3ec:	d6 df       	rcall	.-84     	; 0x39a <transmit_paket>
		Uart_Putch(0,'a');
		Uart_Putch(1,'a');
		for(i=1;i<=mortor_size;i++){
			RxPosition(i);
		}
		for(k=0;k<mortor_size;k++){
 3ee:	21 96       	adiw	r28, 0x01	; 1
 3f0:	c8 30       	cpi	r28, 0x08	; 8
 3f2:	d1 05       	cpc	r29, r1
 3f4:	89 f7       	brne	.-30     	; 0x3d8 <main+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f6:	2f ef       	ldi	r18, 0xFF	; 255
 3f8:	89 e6       	ldi	r24, 0x69	; 105
 3fa:	98 e1       	ldi	r25, 0x18	; 24
 3fc:	21 50       	subi	r18, 0x01	; 1
 3fe:	80 40       	sbci	r24, 0x00	; 0
 400:	90 40       	sbci	r25, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <main+0x44>
 404:	00 c0       	rjmp	.+0      	; 0x406 <main+0x4e>
 406:	00 00       	nop
 408:	da cf       	rjmp	.-76     	; 0x3be <main+0x6>

0000040a <Init_Uart>:
#include <avr/interrupt.h>		//ATmega128 INTERRUPT Header
#include <util/delay.h>			//ATmega128 delay Function Header
#include "uart.h"

void Init_Uart(U08 Com, U32 Uart_Baud)
{
 40a:	cf 93       	push	r28
 40c:	c8 2f       	mov	r28, r24
	U16 Temp_UBRR;

	Temp_UBRR = 16000000L/(16L * Uart_Baud) - 1;   	// 통신 보레이트 계산식
 40e:	db 01       	movw	r26, r22
 410:	ca 01       	movw	r24, r20
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	aa 1f       	adc	r26, r26
 418:	bb 1f       	adc	r27, r27
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	aa 1f       	adc	r26, r26
 420:	bb 1f       	adc	r27, r27
 422:	9c 01       	movw	r18, r24
 424:	ad 01       	movw	r20, r26
 426:	22 0f       	add	r18, r18
 428:	33 1f       	adc	r19, r19
 42a:	44 1f       	adc	r20, r20
 42c:	55 1f       	adc	r21, r21
 42e:	22 0f       	add	r18, r18
 430:	33 1f       	adc	r19, r19
 432:	44 1f       	adc	r20, r20
 434:	55 1f       	adc	r21, r21
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	74 e2       	ldi	r23, 0x24	; 36
 43a:	84 ef       	ldi	r24, 0xF4	; 244
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	35 d0       	rcall	.+106    	; 0x4aa <__udivmodsi4>
 440:	21 50       	subi	r18, 0x01	; 1
 442:	31 09       	sbc	r19, r1
	// U2X = 0 일때 (일반모드)
	if( Com == 0 )
 444:	c1 11       	cpse	r28, r1
 446:	0d c0       	rjmp	.+26     	; 0x462 <Init_Uart+0x58>
	{
		UBRR0H = (Temp_UBRR >> 8);              // 통신속도 설정
 448:	30 93 90 00 	sts	0x0090, r19
		UBRR0L = (Temp_UBRR & 0x00FF);
 44c:	29 b9       	out	0x09, r18	; 9
		
		UCSR0A = (0<<RXC0)  | (1<<UDRE0);		// 수신,송신 상태비트 초기화
 44e:	80 e2       	ldi	r24, 0x20	; 32
 450:	8b b9       	out	0x0b, r24	; 11
		UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);  		// 수신,송신 기능 활성화
 452:	88 e9       	ldi	r24, 0x98	; 152
 454:	8a b9       	out	0x0a, r24	; 10
		UCSR0C = (3<<UCSZ00);				// START 1비트/DATA 8비트/STOP 1비트
 456:	86 e0       	ldi	r24, 0x06	; 6
 458:	80 93 95 00 	sts	0x0095, r24
		
		cbi( DDRE, 0 );                         // RXD0 핀 입력으로 설정
 45c:	10 98       	cbi	0x02, 0	; 2
		sbi( DDRE, 1 );                         // TXD0 핀 출력으로 설정
 45e:	11 9a       	sbi	0x02, 1	; 2
 460:	11 c0       	rjmp	.+34     	; 0x484 <Init_Uart+0x7a>
	}
	
	if( Com == 1)
 462:	c1 30       	cpi	r28, 0x01	; 1
 464:	79 f4       	brne	.+30     	; 0x484 <Init_Uart+0x7a>
	{
		UBRR1H = (Temp_UBRR >> 8);              // 통신속도 설정
 466:	30 93 98 00 	sts	0x0098, r19
		UBRR1L = (Temp_UBRR & 0x00FF);
 46a:	20 93 99 00 	sts	0x0099, r18

		UCSR1A = (0<<RXC1)  | (1<<UDRE1); 	// 수신,송신 상태비트 초기화
 46e:	80 e2       	ldi	r24, 0x20	; 32
 470:	80 93 9b 00 	sts	0x009B, r24
		UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);    	// 수신,송신 기능 활성화
 474:	88 e9       	ldi	r24, 0x98	; 152
 476:	80 93 9a 00 	sts	0x009A, r24
		UCSR1C = (3<<UCSZ10);                   // START 1비트/DATA 8비트/STOP 1비트
 47a:	86 e0       	ldi	r24, 0x06	; 6
 47c:	80 93 9d 00 	sts	0x009D, r24
		
		cbi( DDRD, 2 );                         // RXD1 핀 입력으로 설정
 480:	8a 98       	cbi	0x11, 2	; 17
		sbi( DDRD, 3 );                         // TXD1 핀 출력으로 설정
 482:	8b 9a       	sbi	0x11, 3	; 17
	}
}
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <Uart_Putch>:

void Uart_Putch(U08 Com, U08 Data)
{
	switch(Com)
 488:	88 23       	and	r24, r24
 48a:	19 f0       	breq	.+6      	; 0x492 <Uart_Putch+0xa>
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	61 f4       	brne	.+24     	; 0x4a8 <Uart_Putch+0x20>
 490:	04 c0       	rjmp	.+8      	; 0x49a <Uart_Putch+0x12>
	{
		case 0:
		while(!( UCSR0A & (1<<UDRE0)) );    // 송신가능시점까지 대기
 492:	5d 9b       	sbis	0x0b, 5	; 11
 494:	fe cf       	rjmp	.-4      	; 0x492 <Uart_Putch+0xa>
		UDR0 = Data;                     // 데이터를 전송한다
 496:	6c b9       	out	0x0c, r22	; 12
		break;
 498:	08 95       	ret
		
		case 1:
		while(!( UCSR1A & (1<<UDRE1)) );    // 송신가능시점까지 대기
 49a:	eb e9       	ldi	r30, 0x9B	; 155
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	85 ff       	sbrs	r24, 5
 4a2:	fd cf       	rjmp	.-6      	; 0x49e <Uart_Putch+0x16>
		UDR1 = Data;                     // 데이터를 전송한다
 4a4:	60 93 9c 00 	sts	0x009C, r22
 4a8:	08 95       	ret

000004aa <__udivmodsi4>:
 4aa:	a1 e2       	ldi	r26, 0x21	; 33
 4ac:	1a 2e       	mov	r1, r26
 4ae:	aa 1b       	sub	r26, r26
 4b0:	bb 1b       	sub	r27, r27
 4b2:	fd 01       	movw	r30, r26
 4b4:	0d c0       	rjmp	.+26     	; 0x4d0 <__udivmodsi4_ep>

000004b6 <__udivmodsi4_loop>:
 4b6:	aa 1f       	adc	r26, r26
 4b8:	bb 1f       	adc	r27, r27
 4ba:	ee 1f       	adc	r30, r30
 4bc:	ff 1f       	adc	r31, r31
 4be:	a2 17       	cp	r26, r18
 4c0:	b3 07       	cpc	r27, r19
 4c2:	e4 07       	cpc	r30, r20
 4c4:	f5 07       	cpc	r31, r21
 4c6:	20 f0       	brcs	.+8      	; 0x4d0 <__udivmodsi4_ep>
 4c8:	a2 1b       	sub	r26, r18
 4ca:	b3 0b       	sbc	r27, r19
 4cc:	e4 0b       	sbc	r30, r20
 4ce:	f5 0b       	sbc	r31, r21

000004d0 <__udivmodsi4_ep>:
 4d0:	66 1f       	adc	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	88 1f       	adc	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	1a 94       	dec	r1
 4da:	69 f7       	brne	.-38     	; 0x4b6 <__udivmodsi4_loop>
 4dc:	60 95       	com	r22
 4de:	70 95       	com	r23
 4e0:	80 95       	com	r24
 4e2:	90 95       	com	r25
 4e4:	9b 01       	movw	r18, r22
 4e6:	ac 01       	movw	r20, r24
 4e8:	bd 01       	movw	r22, r26
 4ea:	cf 01       	movw	r24, r30
 4ec:	08 95       	ret

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
