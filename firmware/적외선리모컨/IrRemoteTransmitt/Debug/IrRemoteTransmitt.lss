
IrRemoteTransmitt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000178  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000178  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000020c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000096f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000050  00000000  00000000  0000099e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000475  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001c0  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000255  00000000  00000000  00001023  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b8  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000149  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000226  00000000  00000000  00001479  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000040  00000000  00000000  0000169f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	6e d0       	rcall	.+220    	; 0x120 <main>
  44:	97 c0       	rjmp	.+302    	; 0x174 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <carry_freq>:
	
	
	SREG |= _BV(7);
}
void carry_freq(){
	PORTC &= ~_BV(5);
  48:	ad 98       	cbi	0x15, 5	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4a:	85 e4       	ldi	r24, 0x45	; 69
  4c:	8a 95       	dec	r24
  4e:	f1 f7       	brne	.-4      	; 0x4c <carry_freq+0x4>
  50:	00 00       	nop
	_delay_us(13);
	PORTC |= _BV(5);
  52:	ad 9a       	sbi	0x15, 5	; 21
  54:	85 e4       	ldi	r24, 0x45	; 69
  56:	8a 95       	dec	r24
  58:	f1 f7       	brne	.-4      	; 0x56 <carry_freq+0xe>
  5a:	00 00       	nop
  5c:	08 95       	ret

0000005e <emit_bit>:
	_delay_us(13);
}
//반드시 0 혹은 1이 들어가야함
void emit_bit(unsigned char bit){
  5e:	cf 93       	push	r28
	unsigned char i;
	if(bit == 0){
  60:	81 11       	cpse	r24, r1
  62:	0c c0       	rjmp	.+24     	; 0x7c <emit_bit+0x1e>
  64:	c6 e1       	ldi	r28, 0x16	; 22
		for(i=0;i<22;i++){
			carry_freq();
  66:	f0 df       	rcall	.-32     	; 0x48 <carry_freq>
  68:	c1 50       	subi	r28, 0x01	; 1
}
//반드시 0 혹은 1이 들어가야함
void emit_bit(unsigned char bit){
	unsigned char i;
	if(bit == 0){
		for(i=0;i<22;i++){
  6a:	e9 f7       	brne	.-6      	; 0x66 <emit_bit+0x8>
			carry_freq();
		}
		PORTC &= ~_BV(5);
  6c:	ad 98       	cbi	0x15, 5	; 21
  6e:	8b ec       	ldi	r24, 0xCB	; 203
  70:	98 e0       	ldi	r25, 0x08	; 8
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <emit_bit+0x14>
  76:	00 c0       	rjmp	.+0      	; 0x78 <emit_bit+0x1a>
  78:	00 00       	nop
  7a:	0d c0       	rjmp	.+26     	; 0x96 <emit_bit+0x38>
		_delay_us(563);
	}
	else if(bit==1){
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	59 f4       	brne	.+22     	; 0x96 <emit_bit+0x38>
  80:	c6 e1       	ldi	r28, 0x16	; 22
		for(i=0;i<22;i++){
			carry_freq();
  82:	e2 df       	rcall	.-60     	; 0x48 <carry_freq>
  84:	c1 50       	subi	r28, 0x01	; 1
		}
		PORTC &= ~_BV(5);
		_delay_us(563);
	}
	else if(bit==1){
		for(i=0;i<22;i++){
  86:	e9 f7       	brne	.-6      	; 0x82 <emit_bit+0x24>
			carry_freq();
		}
		PORTC &= ~_BV(5);
  88:	ad 98       	cbi	0x15, 5	; 21
  8a:	8b e5       	ldi	r24, 0x5B	; 91
  8c:	9a e1       	ldi	r25, 0x1A	; 26
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <emit_bit+0x30>
  92:	00 c0       	rjmp	.+0      	; 0x94 <emit_bit+0x36>
  94:	00 00       	nop
		_delay_us(1687);
	}
}
  96:	cf 91       	pop	r28
  98:	08 95       	ret

0000009a <emit_byte>:
void emit_byte(unsigned char byte){
  9a:	ff 92       	push	r15
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	f8 2e       	mov	r15, r24
  a6:	c7 e0       	ldi	r28, 0x07	; 7
  a8:	d0 e0       	ldi	r29, 0x00	; 0
	
	unsigned char i;
	for(i=0;i<8;i++){
		unsigned char com=0;
		com = byte & 1<<(7-i);
  aa:	01 e0       	ldi	r16, 0x01	; 1
  ac:	10 e0       	ldi	r17, 0x00	; 0
  ae:	98 01       	movw	r18, r16
  b0:	0c 2e       	mov	r0, r28
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <emit_byte+0x1e>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <emit_byte+0x1a>
  bc:	2f 21       	and	r18, r15
		if(com == 0){
  be:	19 f4       	brne	.+6      	; 0xc6 <emit_byte+0x2c>
			emit_bit(0);
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	cd df       	rcall	.-102    	; 0x5e <emit_bit>
  c4:	02 c0       	rjmp	.+4      	; 0xca <emit_byte+0x30>
		}
		else{
			emit_bit(1);
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	ca df       	rcall	.-108    	; 0x5e <emit_bit>
  ca:	21 97       	sbiw	r28, 0x01	; 1
  cc:	80 f7       	brcc	.-32     	; 0xae <emit_byte+0x14>
		}
	}
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	ff 90       	pop	r15
  d8:	08 95       	ret

000000da <emit_remote_light>:
void emit_remote_light(unsigned char address,unsigned char data){
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	18 2f       	mov	r17, r24
  e2:	d6 2f       	mov	r29, r22
  e4:	cd ea       	ldi	r28, 0xAD	; 173
	
	unsigned char i=0;
	for(i=0;i<173;i++){//lead
		carry_freq();
  e6:	b0 df       	rcall	.-160    	; 0x48 <carry_freq>
  e8:	c1 50       	subi	r28, 0x01	; 1
	}
}
void emit_remote_light(unsigned char address,unsigned char data){
	
	unsigned char i=0;
	for(i=0;i<173;i++){//lead
  ea:	e9 f7       	brne	.-6      	; 0xe6 <emit_remote_light+0xc>
  ec:	8f e4       	ldi	r24, 0x4F	; 79
  ee:	96 e4       	ldi	r25, 0x46	; 70
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <emit_remote_light+0x16>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <emit_remote_light+0x1c>
  f6:	00 00       	nop
		carry_freq();
	}
	_delay_us(4500);
	emit_byte(address);
  f8:	81 2f       	mov	r24, r17
  fa:	cf df       	rcall	.-98     	; 0x9a <emit_byte>
	emit_byte(~address);
  fc:	81 2f       	mov	r24, r17
  fe:	80 95       	com	r24
 100:	cc df       	rcall	.-104    	; 0x9a <emit_byte>
	emit_byte(data);
 102:	8d 2f       	mov	r24, r29
 104:	ca df       	rcall	.-108    	; 0x9a <emit_byte>
	emit_byte(~data);
 106:	8d 2f       	mov	r24, r29
 108:	80 95       	com	r24
 10a:	c7 df       	rcall	.-114    	; 0x9a <emit_byte>
	
	emit_bit(1);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	a7 df       	rcall	.-178    	; 0x5e <emit_bit>
		
}
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	08 95       	ret

00000118 <port_set>:
void port_set(){
	DDRC=0x00;
 118:	14 ba       	out	0x14, r1	; 20
	DDRC |= _BV(5);
 11a:	a5 9a       	sbi	0x14, 5	; 20
	PORTC &= ~_BV(5);
 11c:	ad 98       	cbi	0x15, 5	; 21
 11e:	08 95       	ret

00000120 <main>:
}
unsigned char c5,c4,c3,c2;
int main(void)
{
	port_set();
 120:	fb df       	rcall	.-10     	; 0x118 <port_set>
	while(1)
	{
		c5 = (PINC & 1<<5);
 122:	83 b3       	in	r24, 0x13	; 19
 124:	80 72       	andi	r24, 0x20	; 32
 126:	80 93 62 00 	sts	0x0062, r24
		c4 = (PINC & 1<<4);
 12a:	93 b3       	in	r25, 0x13	; 19
 12c:	90 71       	andi	r25, 0x10	; 16
 12e:	90 93 60 00 	sts	0x0060, r25
		c3 = (PINC & 1<<3);
 132:	23 b3       	in	r18, 0x13	; 19
 134:	28 70       	andi	r18, 0x08	; 8
 136:	20 93 63 00 	sts	0x0063, r18
		c2 = (PINC & 1<<2);
 13a:	33 b3       	in	r19, 0x13	; 19
 13c:	34 70       	andi	r19, 0x04	; 4
 13e:	30 93 61 00 	sts	0x0061, r19
		if( c5==0){//전진
 142:	81 11       	cpse	r24, r1
 144:	04 c0       	rjmp	.+8      	; 0x14e <main+0x2e>
			emit_remote_light(0x01,0x01);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	c7 df       	rcall	.-114    	; 0xda <emit_remote_light>
 14c:	11 c0       	rjmp	.+34     	; 0x170 <main+0x50>
		}
		else if( c4==0){//후진
 14e:	91 11       	cpse	r25, r1
 150:	04 c0       	rjmp	.+8      	; 0x15a <main+0x3a>
			emit_remote_light(0x01,0x02);
 152:	62 e0       	ldi	r22, 0x02	; 2
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	c1 df       	rcall	.-126    	; 0xda <emit_remote_light>
 158:	0b c0       	rjmp	.+22     	; 0x170 <main+0x50>
		}
		else if( c3==0){//좌회전
 15a:	21 11       	cpse	r18, r1
 15c:	04 c0       	rjmp	.+8      	; 0x166 <main+0x46>
			emit_remote_light(0x01,0x03);
 15e:	63 e0       	ldi	r22, 0x03	; 3
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	bb df       	rcall	.-138    	; 0xda <emit_remote_light>
 164:	05 c0       	rjmp	.+10     	; 0x170 <main+0x50>
		}
		else if( c2==0){//우회전
 166:	31 11       	cpse	r19, r1
 168:	03 c0       	rjmp	.+6      	; 0x170 <main+0x50>
			emit_remote_light(0x01,0x04);
 16a:	64 e0       	ldi	r22, 0x04	; 4
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	b5 df       	rcall	.-150    	; 0xda <emit_remote_light>
		}
		////emit_remote_light(0x01,0x04);
		PORTC &= ~_BV(5);
 170:	ad 98       	cbi	0x15, 5	; 21
		//_delay_ms(20);

	}
 172:	d7 cf       	rjmp	.-82     	; 0x122 <main+0x2>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
