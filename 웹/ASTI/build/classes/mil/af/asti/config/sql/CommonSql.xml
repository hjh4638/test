<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="CommonSql">

<typeAlias alias="astiBoardDTO" type="mil.af.asti.model.AstiBoardDTO" /> 
<typeAlias alias="astiBoardAddtextDTO" type="mil.af.asti.model.AstiBoardAddtextDTO" /> 
<typeAlias alias="astiBoardFileDTO" type="mil.af.asti.model.AstiBoardFileDTO" /> 
<typeAlias alias="astiCodeDTO" type="mil.af.asti.model.AstiCodeDTO" /> 
<typeAlias alias="astiResearchWorkerDTO" type="mil.af.asti.model.AstiResearchWorkerDTO" /> 
<typeAlias alias="astiUserDTO" type="mil.af.asti.model.AstiUserDTO" /> 
<typeAlias alias="astiBoardSearchDTO" type="mil.af.asti.model.AstiBoardSearchDTO" /> 
<typeAlias alias="astiBoardPaginationDTO" type="mil.af.asti.model.AstiBoardPaginationDTO" /> 
	<typeAlias alias="UserDTO" type="mil.af.asti.model.AstiUserDTO"/>
<!-- 회원가입 정보입력 -->
	<insert id="insertAstiUser" parameterClass="astiUserDTO">
		INSERT INTO asti_user
		(
		    user_id,
		    user_password,
		    user_name,
		    user_birth_date,
		    user_register_date,
		    user_sex
		)
		values(
	    	#user_id#,
	    	#user_password#,
	    	#user_name#,
	    	#user_birth_date#,
	    	sysdate,
	    	#user_sex#
		)
	</insert>
<!-- 회원정보가져오기 -->
	<select id="getUserInfo" parameterClass="String" resultClass="astiUserDTO">
		SELECT 
			user_id,
			user_sex,
			user_name,
			user_authority
		FROM
			ASTI_USER
		WHERE
			USER_ID = #user_id#
	</select>
<!-- 탈퇴전 회원 정보 가져오기 -->
	<select id="getUsersAllInfo" parameterClass="astiUserDTO" resultClass="astiUserDTO">
		SELECT
			user_id,
			user_sex,
			user_name,
			user_authority,
			TO_CHAR(user_birth_date,'YYYY/MM/DD') as user_birth_date,
			user_phone_number
		FROM
			ASTI_USER
		WHERE
			USER_ID = #user_id#
	</select>
	<statement id="mergeIntoUser" parameterClass="astiUserDTO">
		MERGE INTO 
		    asti_user
		USING 
		    dual
		ON
		    (user_id = #user_id#)
	   	WHEN MATCHED THEN UPDATE SET
	        user_password=#user_password#,
	        user_name=#user_name#,
	        user_sex=#user_sex#,
	        user_birth_date=#user_birth_date#,
	        user_job=#user_job#,
	        user_authority=#user_authority#,
	        user_phone_number=#user_phone_number#
	   WHEN NOT MATCHED THEN INSERT
		    (
			    user_id,
			    user_password,
			    user_name,
	            user_sex,
			    user_birth_date,
	            user_job,
	            user_authority,
	            user_phone_number,
			    user_register_date
			    
			)
			values(
		    	#user_id#,
			    #user_password#,
			    #user_name#,
	            #user_sex#,
			    #user_birth_date#,
	            #user_job#,
	            #user_authority#,
	            #user_phone_number#,
			    sysdate
			)
	</statement>
	<select id="getUser" parameterClass="astiUserDTO" resultClass="astiUserDTO">
	SELECT 
	    user_id,
	    user_password,
	    user_name,
	    user_sex,
	    DECODE(user_sex, 'M', '남', '여') user_sex_name,
	    to_char(user_birth_date,'yyyy/mm/dd') user_birth_date,
	    user_job,
	    user_authority,
	    NVL((SELECT code_name FROM asti_code WHERE code_id = user_authority),'미승인') user_authority_name,
	    user_phone_number,
	    to_char(user_register_date,'yyyy/mm/dd') user_register_date
	FROM 
	    asti_user
	WHERE
	    user_id = #user_id#
	</select>
	<select id="getUserList" parameterClass="astiUserDTO" resultClass="astiUserDTO">
	SELECT 
	    user_id,
	    user_password,
	    user_name,
	    user_sex,
	    DECODE(user_sex, 'M', '남', '여') user_sex_name,
	    to_char(user_birth_date,'yyyy/mm/dd') user_birth_date,
	    user_job,
	    user_authority,
	    NVL((SELECT code_name FROM asti_code WHERE code_id = user_authority),'미승인') user_authority_name,
	    user_phone_number,
	    to_char(user_register_date,'yyyy/mm/dd') user_register_date
	FROM 
	    asti_user
	</select>
	<delete id="deleteUser" parameterClass="astiUserDTO">
	DELETE 
		asti_user 
	WHERE 
		user_id =#user_id#
	</delete>
<!-- 로그인 확인용 -->
	<select id="getMatchedUserInfo" parameterClass ="astiUserDTO" resultClass="astiUserDTO">
		SELECT 
			user_id
		FROM
			ASTI_USER
		WHERE
			user_id = #user_id# AND user_password = #user_password#
	</select>
<!-- 웹마스터 화면에서 보여질 회원 목록 -->
	<select id="getWaitingUserList" resultClass="astiUserDTO">
		SELECT 
			*
		FROM
			ASTI_USER
		WHERE
			user_authority is null
	</select>
<!-- 탈퇴되는 회원의 정보를 탈퇴 테이블에 입력 -->
	<insert id="insertRemoveMember" parameterClass="astiUserDTO">
		INSERT INTO ASTI_REMOVED_USER
		VALUES(#user_id#,#user_name#,#user_sex#,TO_DATE(#user_birth_date#,'YYYY/MM/DD'),#user_phone_number#)
	</insert>
	<select id="isDownAuth" parameterClass="Map" resultClass="String">
	SELECT 
	    CASE WHEN substr(board_authority,3,3) >= substr(#user_authority#,3,3) THEN 'true'
	    ELSE 'false'
	    END "boolean"
	FROM 
	    asti_board JOIN asti_board_file
	USING(board_id)
	WHERE file_id =#file_id#
	</select>
</sqlMap>